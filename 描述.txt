你作为一名开发工程师，等会根据我的需求给我正确的代码

现阶段有的文件是contrnller.py:连接ryu控制器的代码，topology.py：启动mininet拓扑的代码，script1.sh:主机1发送数据流脚本，script2.sh：主机2发送数据流脚本，script3.sh：主机3发送数据流脚本，script4.sh：主机4发送数据流脚本,h1file.txt：收集h1的流量信息,h2file.txt：收集h2的流量信息,h3file.txt：收集h3的流量信息,h4file.txt：收集h4的流量信息
现在需要弄一个程序，使用python2运行，需求是：是一个网页端，网页端口在2003，当程序发生意外中断时，会释放端口资源，支持热重载，网页页面顶端中央有title：team1 102zzm,中间有块巨大的区域用于展示获取的信息，网页所有的按钮位于左侧中央，一个启动ryu按钮，点击后，可以在新终端新执行ryu-manager controller.py，然后还有一个启动mininet按钮，点击后可以打开新终端的执行指令sudo python topology.py (sudo指令需要输入密码，密码为123456),有四个按钮h1,h2,h3,h4，分别点击后可以分别在mininet界面执行指令xterm h1（即打开xterm窗口）,然后往xterm界面执行bash ./script1.sh;h2、h3、h4同理（例如：script_name = 'script{}.sh'.format(host_id)
        # 修改这里，使xterm打开后立即执行指定的脚本
        subprocess.Popen('xterm -title "Host {}" -e "bash ./{}"'.format(host_id, script_name), shell=True)）。再添加四个按钮为h1 stop、h2 stop、h3 stop、h4 stop，分别点击后可以分别在mininet界面执行指令xterm h1（即打开xterm窗口）,然后往xterm界面执行bash ./script1.sh stop;h2、h3、h4同理。
还有4个按钮，分别是file1、file2、file3、file4,分别点击后可以在中间的巨大的区域处展示出对应文件内的获取信息，
文件内容例子h1file.txt如下：
------------------------------------------------------------
Server listening on UDP port 5001
Receiving 1470 byte datagrams
UDP buffer size:  208 KByte (default)
------------------------------------------------------------
[ 21] local 10.0.0.1 port 5001 connected with 10.0.0.3 port 39677
[ ID] Interval       Transfer     Bandwidth        Jitter   Lost/Total Datagrams
[ 21]  0.0- 1.0 sec   151 KBytes  1.23 Mbits/sec   0.068 ms    0/  105 (0%)
[ 21] 0.00-1.00 sec  8 datagrams received out-of-order
[ 21]  1.0- 2.0 sec   128 KBytes  1.05 Mbits/sec   0.021 ms    0/   89 (0%)
[ 21]  2.0- 3.0 sec   128 KBytes  1.05 Mbits/sec   0.015 ms    0/   89 (0%)
[ 21]  3.0- 4.0 sec   128 KBytes  1.05 Mbits/sec   0.027 ms    0/   89 (0%)
[ 21]  4.0- 5.0 sec   129 KBytes  1.06 Mbits/sec   0.011 ms    0/   90 (0%)
[ 21]  5.0- 6.0 sec   128 KBytes  1.05 Mbits/sec   0.018 ms    0/   89 (0%)
[ 21]  6.0- 7.0 sec   128 KBytes  1.05 Mbits/sec   0.016 ms    0/   89 (0%)
[ 21]  7.0- 8.0 sec   128 KBytes  1.05 Mbits/sec   0.012 ms    0/   89 (0%)
[ 21]  8.0- 9.0 sec   128 KBytes  1.05 Mbits/sec   0.019 ms    0/   89 (0%)
[ 21]  0.0- 9.8 sec  1.25 MBytes  1.07 Mbits/sec   0.011 ms    0/  893 (0%)
[ 21] 0.00-9.84 sec  8 datagrams received out-of-order
